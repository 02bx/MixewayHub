#!/bin/bash

print_help() {
  pritnf "Mixeway Fortify CI MVN script, is contacting with Mixeway REST API in order to request SAST scan, OpenSource scan and later it verify results found during scanning of source code and OpenSource
  Libraries\n\n\n"
  printf "Example usage:\nmixeway-ci --appname=projectName --groupname=groupName --mixewayurl=http://mixeway.io --mixewayapikey=123 --mixewayprojectid=1 --skipsast --skipopensource"
  printf "\nRequired:\n"
  printf "    --appname - Subject application name\n"
  printf "    --groupname - Fortify SCA build name\n"
  printf "    --mixewayurl - URL for Mixeway API\n"
  printf "    --mixewayapikey - API key generated on Mixeway to authenticate call\n"
  printf "    --mixewayprojectid - ID of project on Mixeway\n"
  printf "    --skipsast - to skip SAST scan\n"
  printf "    --skipopensource - to skip OpenSource Vulnerability scan\n"
}
if ! type jq > /dev/null; then
  echo "JQ has to be installed in order to run this script. Please install jq and try again."
  exit 2
fi
if ! type sourceanalyzer > /dev/null; then
  echo "Fortify SCA (sourceanalyzer command) has to be installed in order to run this script. Please install sourceanalyzer and try again."
  exit 2
fi
if ! type cloudscan > /dev/null; then
  echo "Fortify SCA (cloudscan command) has to be installed in order to run this script. Please install cloudscan and try again."
  exit 2
fi
if ! type curl > /dev/null; then
  echo "Curl has to be installed in order to run this script. Please install curl and try again."
  exit 2
fi
if ! type git > /dev/null; then
  echo "Git has to be installed in order to run this script. Please install curl and try again."
  exit 2
fi
skip_sast="false"
skip_os="false"
COMMITID=""
while [ $# -gt 0 ]; do
  case "$1" in
    --appname=*)
      app_name="${1#*=}"
      ;;
    --groupname=*)
      group_name="${1#*=}"
      ;;
    --mixewayapikey=*)
      mixeway_api_key="${1#*=}"
      ;;
    --mixewayurl=*)
      mixeway_url="${1#*=}"
      ;;
    --mixewayprojectid=*)
      mixeway_project_id="${1#*=}"
      ;;
    --skipsast*)
      skip_sast="true"
      ;;
    --skipopensource*)
      skip_os="true"
      ;;
    --help=*)
      help_=1
      ;;
    *)
      print_help
      exit 1
  esac
  shift
done
get_commit_id() {
  COMMITID=$(git rev-parse HEAD)
}
fortify_clean() {
  echo "Cleaning project files for $group_name"
  sourceanalyzer -b $group_name -clean
}
fortify_translate() {
  echo "Translating $group_name ..."
  sourceanalyzer -b $group_name mvn package -DskipTests
}
fortify_cloudscan() {
  echo "Sending Scan to cloudscan for  $group_name ..."
  cloudscan -sscurl $SAST_URL -ssctoken $SAST_TOKEN start -upload -versionid $SAST_VERSIONID -b $group_name -uptoken $SAST_TOKEN -scan
}
#TODO
get_sast_config(){
  SAST_RESPONSE=$(curl -k -s --request GET --url $mixeway_url/v2/api/show/project/$mixeway_project_id/sast/$group_name/$app_name --header 'apikey: '"$mixeway_api_key"'')
  INTEGRATION_SAST=$(echo SAST_RESPONSE | jq -r '.openSourceScannerIntegration') #TODO
  if [ "$INTEGRATION_SAST" = "true" ]; then
    echo "SAST scanner is avaliable proceeding..."
    SAST_URL=$(echo $SAST_RESPONSE | jq -r '.openSourceScannerApiUrl') #TODO
    SAST_TOKEN=$(echo $SAST_RESPONSE | jq -r '.openSourceScannerProjectId') #TODO
    SAST_VERSIONID=$(echo $SAST_RESPONSE | jq -r '.openSourceScannerCredentials') #TODO
  else
    echo "SAST Scan was requested but there no integration between given project and SAST scanner"
  fi
}
init_ci_job() {
  echo "Initializing CI job"
  curl -k -s --request GET --url $mixeway_url/v2/api/cicd/project/$mixeway_project_id/code/init/$group_name/$app_name/$COMMITID --header 'apikey: '"$mixeway_api_key"'' --output /dev/null
}
send_bom() {
  POSTDATA="{\"project\":\"$OS_ID\",\"bom\":\"$BOM\"}"
  curl -X "PUT" "$OS_URL/api/v1/bom" \
    -k \
    --noproxy "*" \
    -H 'Content-Type: application/json' \
    -H 'X-API-Key: '$OS_APIKEY \
    -d @- "$OS_URL/api/v1/bom" <<CURL_DATA
      $POSTDATA
CURL_DATA
}
run_sast(){
  get_sast_config
  fortify_clean
  fortify_translate
  fortify_cloudscan
}
run_opensource() {
  echo "Getting OpenSource Vulnerability scanner integration info"
  OS_RESPONSE=$(curl -k -s --request GET --url $mixeway_url/v2/api/show/project/$mixeway_project_id/opensource/$group_name/$app_name --header 'apikey: '"$mixeway_api_key"'')
  INTEGRATION=$(echo $OS_RESPONSE | jq -r '.openSourceScannerIntegration')
  if [ "$INTEGRATION" = "true" ]; then
    echo "OpenSource scanner is avaliable proceeding..."
    OS_URL=$(echo $OS_RESPONSE | jq -r '.openSourceScannerApiUrl')
    OS_ID=$(echo $OS_RESPONSE | jq -r '.openSourceScannerProjectId')
    OS_APIKEY=$(echo $OS_RESPONSE | jq -r '.openSourceScannerCredentials')
    TECH=$(echo $OS_RESPONSE | jq -r '.tech')
    SCANNER_TYPE=$(echo $OS_RESPONSE | jq -r '.scannerType')
    TECH=$(echo "$TECH" | awk '{print tolower($0)}')
    if [ "$SCANNER_TYPE" = "OWASP Dependency Track" ]; then
      if [ "$TECH" = "mvn" ]; then
        mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom > /dev/null
        BOM=$(base64 target/bom.xml |tr -d \\n)
        send_bom
      else
          echo "Unknown project tech. Supported: MVN, JS, Python, PHP"
      fi
    fi
  else
    echo "OpenSource Vulnerability Scan was requested but there no integration between given project and OpenSource scanner"
  fi
}
if [ ! -z "$app_name" ] && [ ! -z "$group_name" ] && [ ! -z "$mixeway_api_key" ] && [ ! -z "$mixeway_url" ] && [ ! -z "$mixeway_project_id" ]; then
  get_commit_id
  init_ci_job
  if [ $skip_sast = "false" ]; then
    run_sast
  fi
  if [ $skip_os = "false" ]; then
    run_opensource
  fi
  echo "Starting to verify of $app_name ..."

  TIMEOUT=0
  while true
  do
    MIXEWAY_RESPONSE=$(curl --request GET --url $mixeway_url/v2/api/cicd/project/$mixeway_project_id/code/verify/$group_name/$app_name/$COMMITID --header 'apikey: '"$mixeway_api_key"'' -k -s)
    SCAN_STATUS=$(echo $MIXEWAY_RESPONSE | jq -r '.running')
    SCAN_QUEUE=$(echo $MIXEWAY_RESPONSE | jq -r '.inQueue')
    MIXEWAY_RESULT=$(echo $MIXEWAY_RESPONSE | jq -r '.result')
    if [ "$SCAN_STATUS" = "false" ] && [ $SCAN_QUEUE = "false" ]; then
      echo "SAST & OpenSource Vulnerability testing for $app_name is done"
      if [ "$MIXEWAY_RESULT" = "Ok" ]; then
        echo "No Critical Vulnerabilities found"
        exit 0
      else
        echo "There are critical vulnerabilities present, exiting with code 1"
        exit 1
      fi
    fi
    ((TIMEOUT++))
    if [ $TIMEOUT -gt 10 ]; then
      echo "Timeout value exceeded, exiting with 0"
      exit 0;
    fi
    sleep 30
  done
else
  print_help
fi